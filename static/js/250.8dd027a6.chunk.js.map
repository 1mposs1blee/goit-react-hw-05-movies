{"version":3,"file":"static/js/250.8dd027a6.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.styled.jsx","components/MovieProfile/MovieProfile.styled.jsx","components/MovieProfile/MovieProfile.jsx","pages/MovieDetails/MovieDetails.jsx","services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const Link = styled(NavLink)`\n  margin-bottom: 15px;\n  margin-top: 20px;\n  width: 130px;\n  height: 30px;\n  border-radius: 4px;\n  background-color: rgb(63, 81, 181);\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: rgb(255, 255, 255);\n  border: none;\n`;\n\nexport const AdditionalInfTitle = styled.h2`\n  margin-top: 20px;\n`;\n\nexport const LinkList = styled.ul`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n`;\n","import styled from '@emotion/styled';\n\nexport const MainWrapper = styled.div`\n  display: flex;\n  margin-top: 50px;\n  padding: 20px;\n  background-color: rgb(240, 240, 240);\n  border-radius: 10px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 10px;\n`;\n\nexport const InfoWrapper = styled.div`\n  text-align: left;\n  margin-bottom: 20px;\n  margin-left: 30px;\n  margin-top: 20px;\n`;\n\nexport const MovieName = styled.h1`\n  margin-bottom: 10px;\n`;\n\nexport const UserScore = styled.p`\n  margin-bottom: 15px;\n`;\n\nexport const OverviewTitle = styled.h2`\n  margin-bottom: 10px;\n`;\n\nexport const OverviewInfo = styled.p`\n  max-width: 630px;\n  margin-bottom: 15px;\n`;\n\nexport const GenresTitle = styled.h2`\n  margin-bottom: 10px;\n`;\n\nexport const GenresInfo = styled.p`\n  margin-bottom: 15px;\n`;\n\nexport const CompaniesTitle = styled.h2`\n  margin-bottom: 10px;\n`;\n\nexport const ProductionCompanyImgWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: start;\n  flex-wrap: wrap;\n  gap: 15px;\n`;\n\nexport const ProductionCompanyImg = styled.img`\n  max-height: 95px;\n  max-width: 200px;\n  margin-right: 30px;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  ProductionCompanyImg,\n  MainWrapper,\n  InfoWrapper,\n  MovieName,\n  UserScore,\n  OverviewTitle,\n  OverviewInfo,\n  GenresTitle,\n  GenresInfo,\n  CompaniesTitle,\n  ProductionCompanyImgWrapper,\n} from './MovieProfile.styled';\n\nconst MovieProfile = ({ movieOptions }) => {\n  const {\n    poster_path,\n    original_title,\n    popularity,\n    overview,\n    genres,\n    production_companies,\n  } = movieOptions;\n\n  return (\n    <MainWrapper>\n      <img\n        src={\n          poster_path\n            ? `https://image.tmdb.org/t/p/w400${poster_path}`\n            : `https://via.placeholder.com/400x600?text=No+Image`\n        }\n        alt={original_title}\n      />\n      <InfoWrapper>\n        <MovieName>{original_title}</MovieName>\n        <UserScore>User score: {popularity}%</UserScore>\n        {overview && (\n          <>\n            <OverviewTitle>Overview</OverviewTitle>\n            <OverviewInfo>{overview}</OverviewInfo>\n          </>\n        )}\n        {genres.length > 0 && (\n          <>\n            <GenresTitle>Genres</GenresTitle>\n            <GenresInfo>{genres.map(({ name }) => name).join(', ')}</GenresInfo>\n          </>\n        )}\n        {production_companies.length > 0 && (\n          <>\n            <CompaniesTitle>Production Companies</CompaniesTitle>\n            <ProductionCompanyImgWrapper>\n              {production_companies.map(({ logo_path, name, id }) => (\n                <ProductionCompanyImg\n                  key={id}\n                  src={\n                    logo_path\n                      ? `https://image.tmdb.org/t/p/w200${logo_path}`\n                      : `https://via.placeholder.com/200x200?text=No+Image`\n                  }\n                  alt={name ?? 'Production Company logo'}\n                />\n              ))}\n            </ProductionCompanyImgWrapper>\n          </>\n        )}\n      </InfoWrapper>\n    </MainWrapper>\n  );\n};\n\nexport default MovieProfile;\n\nMovieProfile.propTypes = {\n  movieOptions: PropTypes.shape({\n    poster_path: PropTypes.string,\n    original_title: PropTypes.string.isRequired,\n    popularity: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    production_companies: PropTypes.array.isRequired,\n  }).isRequired,\n};\n","import { useParams, useLocation, Outlet } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport moviesApi from 'services/movies-api';\nimport { Link, LinkList, AdditionalInfTitle } from './MovieDetails.styled';\nimport MovieProfile from 'components/MovieProfile';\n\nconst MovieDetails = () => {\n  const [movieOptions, setMovieOptions] = useState(null);\n  const location = useLocation();\n  const currentLocation = useRef(location);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieOptions = async () => {\n      try {\n        const movie = await moviesApi.fetchDetailsByMovie(movieId);\n\n        setMovieOptions(movie);\n      } catch (error) {\n        console.error('Error while loading movie details:', error);\n\n        alert('Something went wrong. Please, reload the application.');\n      }\n    };\n\n    fetchMovieOptions();\n  }, [movieId]);\n\n  const fromPath = currentLocation.current.state?.from ?? '/movies';\n\n  return (\n    <main>\n      {movieOptions && (\n        <>\n          <Link to={fromPath}>Go back</Link>\n          <MovieProfile movieOptions={movieOptions} />\n          <AdditionalInfTitle>Additional information</AdditionalInfTitle>\n          <LinkList>\n            <li>\n              <Link to=\"cast\">Cast of Actors</Link>\n            </li>\n            <li>\n              <Link to=\"reviews\">Reviews</Link>\n            </li>\n          </LinkList>\n        </>\n      )}\n\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyNGY2NzJlZmY2YTVlNDE4NjcyN2EyZDA3ZmFmNzY4NCIsInN1YiI6IjY0ZjMxMWZkNWYyYjhkMDBhYmNhMjkwZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.HiQ0g4bmTHxdwn97dRqSfMIbv4ALG5BCKuJOPjN1fOA';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst fetchTrendingMovies = async () => {\n  const response = await axios.get(`${BASE_URL}trending/movie/day`, {\n    params: {\n      language: `en-US`,\n    },\n    headers: {\n      Authorization: `Bearer ${API_KEY}`,\n    },\n  });\n\n  return response.data.results;\n};\n\nconst fetchMoviesByQuery = async searchQuery => {\n  const response = await axios.get(`${BASE_URL}search/movie`, {\n    params: {\n      language: `en-US`,\n      query: searchQuery,\n    },\n    headers: {\n      Authorization: `Bearer ${API_KEY}`,\n    },\n  });\n\n  return response.data.results;\n};\n\nconst fetchDetailsByMovie = async (movieId, optionDetail = '') => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}${optionDetail}`,\n    {\n      params: {\n        language: 'en-US',\n      },\n      headers: {\n        Authorization: `Bearer ${API_KEY}`,\n      },\n    }\n  );\n\n  return response.data;\n};\n\nconst moviesApi = {\n  fetchTrendingMovies,\n  fetchMoviesByQuery,\n  fetchDetailsByMovie,\n};\n\nexport default moviesApi;\n"],"names":["Link","styled","NavLink","AdditionalInfTitle","LinkList","MainWrapper","InfoWrapper","MovieName","UserScore","OverviewTitle","OverviewInfo","GenresTitle","GenresInfo","CompaniesTitle","ProductionCompanyImgWrapper","ProductionCompanyImg","movieOptions","poster_path","original_title","popularity","overview","genres","production_companies","src","alt","length","map","name","join","logo_path","id","useState","setMovieOptions","location","useLocation","currentLocation","useRef","movieId","useParams","useEffect","fetchMovieOptions","moviesApi","movie","console","error","alert","fromPath","current","state","from","to","Suspense","API_KEY","BASE_URL","fetchTrendingMovies","axios","params","language","headers","Authorization","response","data","results","fetchMoviesByQuery","searchQuery","query","fetchDetailsByMovie","optionDetail"],"sourceRoot":""}