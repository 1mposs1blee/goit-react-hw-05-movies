{"version":3,"file":"static/js/93.bc34be24.chunk.js","mappings":"wRAEaA,EAAcC,EAAAA,EAAAA,IAAH,sBAEXC,EAAYD,EAAAA,EAAAA,GAAH,gDAITE,EAAWF,EAAAA,EAAAA,GAAH,8IAORG,EAAeH,EAAAA,EAAAA,GAAH,+CAIZI,EAAYJ,EAAAA,EAAAA,IAAH,0JAQTK,EAAcL,EAAAA,EAAAA,IAAH,uGAOXM,EAAON,EAAAA,EAAAA,GAAH,gEAKJO,EAAYP,EAAAA,EAAAA,EAAH,6CAITQ,EAAaR,EAAAA,EAAAA,EAAH,6C,SCkCvB,EA9Da,WACX,OAA8BS,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAuBR,OArBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,6GAEKC,EAAAA,EAAAA,oBACtBJ,EACA,YAJiB,OAEbK,EAFa,OAOnBN,EAAYM,EAAUC,MAPH,gDASnBC,QAAQC,MAAM,yPAAd,MAEAC,MAAM,sRAXa,yBAanBZ,GAAW,GAbQ,4EAAH,qDAiBpBM,GACD,GAAE,CAACH,KAGF,SAACf,EAAD,UACGW,EAAU,KAAOE,EAASY,QACzB,iCACE,SAACvB,EAAD,oBACA,SAACC,EAAD,UACGU,EAASa,KACR,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,GAAIC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,cAAeC,EAA/C,EAA+CA,WAA/C,OACE,UAAC3B,EAAD,YACE,SAACC,EAAD,CACE2B,IACEH,EAAY,yCAC0BA,GAD1B,oDAIdI,IAAG,OAAEH,QAAF,IAAEA,EAAAA,EAAiB,WAExB,UAACxB,EAAD,YACE,SAACC,EAAD,UAAOuB,KACP,UAACtB,EAAD,yBAAuBmB,GAAa,cACpC,UAAClB,EAAD,0BACesB,GAAc,kBAbdH,EADrB,SAuBN,mOAIP,C,8DCzEKM,EACJ,sNACIC,EAAW,gCAEXC,EAAmB,mCAAG,oGACHC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,sBAA2C,CAChEG,OAAQ,CACNC,SAAS,SAEXC,QAAS,CACPC,cAAc,UAAD,OAAYP,MANH,cACpBQ,EADoB,yBAUnBA,EAASC,KAAKC,SAVK,2CAAH,qDAanBC,EAAkB,mCAAG,WAAMC,GAAN,uFACFT,EAAAA,EAAAA,IAAA,UAAaF,EAAb,gBAAqC,CAC1DG,OAAQ,CACNC,SAAS,QACTQ,MAAOD,GAETN,QAAS,CACPC,cAAc,UAAD,OAAYP,MAPJ,cACnBQ,EADmB,yBAWlBA,EAASC,KAAKC,SAXI,2CAAH,sDAclBI,EAAmB,mCAAG,WAAOjC,GAAP,4FAAgBkC,EAAhB,+BAA+B,GAA/B,SACHZ,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iBACDpB,GADC,OACSkC,GAC9B,CACEX,OAAQ,CACNC,SAAU,SAEZC,QAAS,CACPC,cAAc,UAAD,OAAYP,MARL,cACpBQ,EADoB,yBAanBA,EAASC,MAbU,2CAAH,sDAgBnBxB,EAAY,CAChBiB,oBAAAA,EACAS,mBAAAA,EACAG,oBAAAA,GAGF,K","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastWrapper = styled.div``;\n\nexport const CastTitle = styled.h2`\n  margin-bottom: 20px;\n`;\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n`;\n\nexport const CastListItem = styled.li`\n  text-align: center;\n`;\n\nexport const ItemImage = styled.img`\n  width: 100%;\n  max-height: 300px;\n  object-fit: cover;\n  border-radius: 8px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 4px;\n`;\n\nexport const InfoWrapper = styled.div`\n  height: 120px;\n\n  background-color: rgb(240, 240, 240);\n  padding: 10px;\n`;\n\nexport const Name = styled.h3`\n  font-size: 18px;\n  margin-top: 5px;\n`;\n\nexport const Character = styled.p`\n  margin-top: 10px;\n`;\n\nexport const Popularity = styled.p`\n  margin-top: 10px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport moviesApi from 'services/movies-api';\nimport {\n  CastList,\n  CastListItem,\n  ItemImage,\n  InfoWrapper,\n  Name,\n  Character,\n  Popularity,\n  CastWrapper,\n  CastTitle,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [loading, setLoading] = useState(true);\n  const [castInfo, setCastInfo] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        const movieCast = await moviesApi.fetchDetailsByMovie(\n          movieId,\n          '/credits'\n        );\n\n        setCastInfo(movieCast.cast);\n      } catch (error) {\n        console.error('Помилка при завантажені списка акторів фільму:', error);\n\n        alert('Щось пішло не так. Будь ласка, перезавантажте додаток.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  return (\n    <CastWrapper>\n      {loading ? null : castInfo.length ? (\n        <>\n          <CastTitle>Cast</CastTitle>\n          <CastList>\n            {castInfo.map(\n              ({ character, id, profile_path, original_name, popularity }) => (\n                <CastListItem key={id}>\n                  <ItemImage\n                    src={\n                      profile_path\n                        ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                        : `https://via.placeholder.com/200x300?text=No+Image`\n                    }\n                    alt={original_name ?? 'Image'}\n                  />\n                  <InfoWrapper>\n                    <Name>{original_name}</Name>\n                    <Character>Character: {character || 'Unknown'}</Character>\n                    <Popularity>\n                      Popularity: {popularity || 'Unknown'}\n                    </Popularity>\n                  </InfoWrapper>\n                </CastListItem>\n              )\n            )}\n          </CastList>\n        </>\n      ) : (\n        'Не було знайдено списка акторів за фільмом.'\n      )}\n    </CastWrapper>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyNGY2NzJlZmY2YTVlNDE4NjcyN2EyZDA3ZmFmNzY4NCIsInN1YiI6IjY0ZjMxMWZkNWYyYjhkMDBhYmNhMjkwZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.HiQ0g4bmTHxdwn97dRqSfMIbv4ALG5BCKuJOPjN1fOA';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst fetchTrendingMovies = async () => {\n  const response = await axios.get(`${BASE_URL}trending/movie/day`, {\n    params: {\n      language: `en-US`,\n    },\n    headers: {\n      Authorization: `Bearer ${API_KEY}`,\n    },\n  });\n\n  return response.data.results;\n};\n\nconst fetchMoviesByQuery = async searchQuery => {\n  const response = await axios.get(`${BASE_URL}search/movie`, {\n    params: {\n      language: `en-US`,\n      query: searchQuery,\n    },\n    headers: {\n      Authorization: `Bearer ${API_KEY}`,\n    },\n  });\n\n  return response.data.results;\n};\n\nconst fetchDetailsByMovie = async (movieId, optionDetail = '') => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}${optionDetail}`,\n    {\n      params: {\n        language: 'en-US',\n      },\n      headers: {\n        Authorization: `Bearer ${API_KEY}`,\n      },\n    }\n  );\n\n  return response.data;\n};\n\nconst moviesApi = {\n  fetchTrendingMovies,\n  fetchMoviesByQuery,\n  fetchDetailsByMovie,\n};\n\nexport default moviesApi;\n"],"names":["CastWrapper","styled","CastTitle","CastList","CastListItem","ItemImage","InfoWrapper","Name","Character","Popularity","useState","loading","setLoading","castInfo","setCastInfo","movieId","useParams","useEffect","fetchMovieCast","moviesApi","movieCast","cast","console","error","alert","length","map","character","id","profile_path","original_name","popularity","src","alt","API_KEY","BASE_URL","fetchTrendingMovies","axios","params","language","headers","Authorization","response","data","results","fetchMoviesByQuery","searchQuery","query","fetchDetailsByMovie","optionDetail"],"sourceRoot":""}